"""

Workflow purpose
----------------
Preprocess raw data.

Outline
-------
1. Combine TCGA clinical and survival data into full metadata.
2. Subset TCGA PANCAN gene expression matrix by cancer type.
"""

import os

##### VARIABLES #####
ROOT = '/home/miquel/projects/publication_robustica'
DATA_DIR = os.path.join(ROOT,'data')
RAW_DIR = os.path.join(DATA_DIR,'raw')
PREP_DIR = os.path.join(DATA_DIR,'prep')

CANCER_TYPES = ['BRCA','LGG']
    
##### RULES #####
rule all:
    input:
        # create metadata
        [os.path.join(PREP_DIR,'metadata','%s.tsv') % cancer for cancer in CANCER_TYPES],
        
        # split by cancer type
        expand(os.path.join(PREP_DIR,'genexpr','{cancer}.tsv.gz'), cancer=CANCER_TYPES),
        
        # prepare Sastry 2019
        os.path.join(PREP_DIR,'genexpr','Sastry2019.tsv.gz')
    
    
rule prepare_metadata:
    input:
        clinical = os.path.join(RAW_DIR,'UCSCXena','TCGA','phenotype','TCGA_phenotype_denseDataOnlyDownload.tsv.gz'),
        survival = os.path.join(RAW_DIR,'UCSCXena','TCGA','phenotype','Survival_SupplementalTable_S1_20171025_xena_sp.gz')
    output:
        [os.path.join(PREP_DIR,'metadata','%s.tsv') % cancer for cancer in CANCER_TYPES]
    params:
        output_dir = os.path.join(PREP_DIR,'metadata')
    shell:
        """
        python scripts/prepare_metadata.py \
                    --raw_tcga_clinical={input.clinical} \
                    --raw_tcga_survival={input.survival} \
                    --output_dir={params.output_dir}
        """
        
        
rule prepare_genexpr:
    input:
        genexpr = os.path.join(RAW_DIR,'UCSCXena','TCGA','rnaseq','AdjustPANCAN_IlluminaHiSeq_RNASeqV2.geneExp.xena.gz'),
        metadata = os.path.join(PREP_DIR,'TCGA','metadata','PANCAN.tsv')
    output:
        os.path.join(PREP_DIR,'genexpr','{cancer}.tsv.gz')
    params:
        sample_col = 'sampleID',
        subset_col = 'cancer_type',
        subset_values = '{cancer}'
    shell:
        """
        python scripts/prepare_genexpr.py \
                    --genexpr_file={input.genexpr} \
                    --metadata_file={input.metadata} \
                    --sample_col={params.sample_col} \
                    --subset_col={params.subset_col} \
                    --subset_values={params.subset_values} \
                    --output_file={output}
        """
        
        
rule prepare_Sastry2019:
    input:
        suptab = os.path.join(RAW_DIR,'articles','Sastry2019','ica_analysis.xlsx')
    output:
        genexpr = os.path.join(PREP_DIR,'genexpr','Sastry2019.tsv.gz'),
        metadata = os.path.join(PREP_DIR,'metadata','Sastry2019.tsv'),
        S = os.path.join(PREP_DIR,'ica','Sastry2019-S.tsv.gz'),
        A = os.path.join(PREP_DIR,'ica','Sastry2019-A.tsv.gz')
    shell:
        """
        python scripts/prepare_Sastry2019.py \
                    --suptab_file={input.suptab} \
                    --genexpr_file={output.genexpr} \
                    --metadata_file={output.metadata} \
                    --S_file={output.S} \
                    --A_file={output.A}
        """