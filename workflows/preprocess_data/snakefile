"""

Workflow purpose
----------------
Preprocess raw data.

Outline
-------
1. Combine TCGA clinical and survival data into full metadata.
2. Subset TCGA PANCAN gene expression matrix by cancer type.
"""

import os
import pandas as pd

##### VARIABLES #####
ROOT = os.path.dirname(os.path.dirname(os.getcwd()))
DATA_DIR = os.path.join(ROOT,'data')
RAW_DIR = os.path.join(DATA_DIR,'raw')
PREP_DIR = os.path.join(DATA_DIR,'prep')
RESULTS_DIR = os.path.join(ROOT,'results')

## TCGA
# select cancer types with at least 200 samples
MIN_SAMPLES = 200
metadata = pd.read_table(os.path.join(RAW_DIR,'UCSCXena','TCGA','phenotype','Survival_SupplementalTable_S1_20171025_xena_sp.gz'))
n_samples = metadata["cancer type abbreviation"].value_counts()
CANCER_TYPES = n_samples[n_samples >= MIN_SAMPLES].index.to_list()

## GTEx
metadata = pd.read_table(os.path.join(RAW_DIR,'GTEx','v8','annotations','GTEx_Analysis_v8_Annotations_SampleAttributesDS.txt'))
n_samples = metadata["SMTS"].str.lower().str.replace(" ","_").value_counts()
TISSUE_TYPES = n_samples[n_samples >= MIN_SAMPLES].index.to_list()
TISSUE_TYPES.remove("bone_marrow") # bone marrow identifiers not found in gene expression matrix

## Run ICA
ITERATIONS = 100
N_COMPONENTS = 100

DATASETS = {
    **{'Sastry2019': os.path.join(PREP_DIR,'genexpr','Sastry2019.tsv.gz')},
    **{cancer: os.path.join(PREP_DIR,'genexpr','TCGA','%s.tsv.gz') % cancer for cancer in CANCER_TYPES},
    **{tissue: os.path.join(PREP_DIR,'genexpr','GTEx','%s.tsv.gz') % tissue for tissue in TISSUE_TYPES}
}

# run Sastry2019's pipeline
DISTANCE_FUNCS = ["original"]#,"full"]

##### RULES #####
rule all:
    input:
        # create metadata
        [os.path.join(PREP_DIR,'metadata','TCGA','%s.tsv') % cancer for cancer in CANCER_TYPES],
        [os.path.join(PREP_DIR,'metadata','GTEx','%s.tsv') % tissue for tissue in TISSUE_TYPES],
        
        # split by cancer type
        expand(os.path.join(PREP_DIR,'genexpr','TCGA','{cancer}.tsv.gz'), cancer=CANCER_TYPES),
        
        # split by tissue type
        expand(os.path.join(PREP_DIR,'genexpr','GTEx','{tissue}.tsv.gz'), tissue=TISSUE_TYPES),
        
        # prepare Sastry 2019
        os.path.join(PREP_DIR,'genexpr','Sastry2019.tsv.gz'),
        
        # prepare mutations TCGA
        expand(os.path.join(PREP_DIR,'snv','TCGA','{cancer}.tsv.gz'), cancer=CANCER_TYPES),
        
        # run ICA multiple times on datasets
        expand(os.path.join(PREP_DIR,'ica_runs','{dataset}'), dataset=DATASETS.keys()),
        
        # compute sample indices
        expand(os.path.join(PREP_DIR,'sample_indices','TCGA','{cancer}.tsv'), cancer=CANCER_TYPES),
        
        # count samples in datasets
        os.path.join(RESULTS_DIR,'preprocess_data','files','dataset_info.tsv'),
        
        # run Sastry's ICA pipeline
        expand(os.path.join(PREP_DIR,'original_pipeline_Sastry2019','{distance_func}','S.csv'), distance_func=DISTANCE_FUNCS),
        expand(os.path.join(PREP_DIR,'original_pipeline_Sastry2019','{distance_func}','A.csv'), distance_func=DISTANCE_FUNCS),
        expand(os.path.join(PREP_DIR,'original_pipeline_Sastry2019','{distance_func}','component_stats.csv'), distance_func=DISTANCE_FUNCS)
    
    
rule prepare_metadata_tcga:
    input:
        clinical = os.path.join(RAW_DIR,'UCSCXena','TCGA','phenotype','TCGA_phenotype_denseDataOnlyDownload.tsv.gz'),
        survival = os.path.join(RAW_DIR,'UCSCXena','TCGA','phenotype','Survival_SupplementalTable_S1_20171025_xena_sp.gz')
    output:
        [os.path.join(PREP_DIR,'metadata','TCGA','%s.tsv') % cancer for cancer in CANCER_TYPES]
    params:
        output_dir = os.path.join(PREP_DIR,'metadata','TCGA'),
        cancer_types_oi = ','.join(CANCER_TYPES)
    shell:
        """
        python scripts/prepare_metadata.py \
                    --raw_tcga_clinical={input.clinical} \
                    --raw_tcga_survival={input.survival} \
                    --output_dir={params.output_dir} \
                    --cancer_types_oi={params.cancer_types_oi}
        """
        
        
rule prepare_metadata_gtex:
    input:
        annot = os.path.join(RAW_DIR,'GTEx','v8','annotations','GTEx_Analysis_v8_Annotations_SampleAttributesDS.txt')
    output:
        annots = [os.path.join(PREP_DIR,'metadata','GTEx','%s.tsv') % tissue for tissue in TISSUE_TYPES]
    run:
        import os
        import pandas as pd
        
        metadata = pd.read_table(input.annot)
        metadata["sampleID"] = metadata["SAMPID"]
        metadata["tissue_type"] = metadata["SMTS"].str.lower().str.replace(" ","_")
        
        for f in output.annots:
            tissue = os.path.basename(f).replace(".tsv","")
            df = metadata.loc[metadata["tissue_type"]==tissue]
            df.to_csv(f, sep="\t", index=False)
        
        print("Done!")
        
        
rule prepare_genexpr_tcga:
    input:
        genexpr = os.path.join(RAW_DIR,'UCSCXena','TCGA','rnaseq','AdjustPANCAN_IlluminaHiSeq_RNASeqV2.geneExp.xena.gz'),
        metadata = os.path.join(PREP_DIR,'metadata','TCGA','{cancer}.tsv')
    output:
        os.path.join(PREP_DIR,'genexpr','TCGA','{cancer}.tsv.gz')
    params:
        sample_col = 'sampleID',
        subset_col = 'cancer_type',
        subset_values = '{cancer}'
    shell:
        """
        python scripts/prepare_genexpr.py \
                    --genexpr_file={input.genexpr} \
                    --metadata_file={input.metadata} \
                    --sample_col={params.sample_col} \
                    --subset_col={params.subset_col} \
                    --subset_values={params.subset_values} \
                    --output_file={output}
        """
        
        
rule prepare_genexpr_gtex:
    input:
        genexpr = os.path.join(RAW_DIR,'GTEx','v8','rnaseq','GTEx_Analysis_2017-06-05_v8_RNASeQCv1.1.9_gene_tpm.gct.gz'),
        metadata = os.path.join(PREP_DIR,'metadata','GTEx','{tissue}.tsv')
    output:
        os.path.join(PREP_DIR,'genexpr','GTEx','{tissue}.tsv.gz')
    params:
        sample_col = 'sampleID',
        subset_col = 'tissue_type',
        subset_values = '{tissue}',
        gene_col = "Description",
        skiprows = 2
    shell:
        """
        python scripts/prepare_genexpr.py \
                    --genexpr_file={input.genexpr} \
                    --metadata_file={input.metadata} \
                    --sample_col={params.sample_col} \
                    --subset_col={params.subset_col} \
                    --subset_values={params.subset_values} \
                    --output_file={output} \
                    --gene_col={params.gene_col} \
                    --skiprows={params.skiprows}
        """
        
        
rule prepare_Sastry2019:
    input:
        suptab = os.path.join(RAW_DIR,'articles','Sastry2019','ica_analysis.xlsx')
    output:
        genexpr = os.path.join(PREP_DIR,'genexpr','Sastry2019.tsv.gz'),
        metadata = os.path.join(PREP_DIR,'metadata','Sastry2019.tsv'),
        S = os.path.join(PREP_DIR,'ica','Sastry2019-S.tsv.gz'),
        A = os.path.join(PREP_DIR,'ica','Sastry2019-A.tsv.gz'),
        gene_annotation = os.path.join(PREP_DIR,'gene_annotation','Sastry2019.tsv')
    shell:
        """
        python scripts/prepare_Sastry2019.py \
                    --suptab_file={input.suptab} \
                    --genexpr_file={output.genexpr} \
                    --metadata_file={output.metadata} \
                    --S_file={output.S} \
                    --A_file={output.A} \
                    --gene_annotation_file={output.gene_annotation}
        """
        
        
rule compute_gene_mutation_frequency_tcga:
    input:
        snv_file = os.path.join(RAW_DIR,'UCSCXena','TCGA','snv','mc3.v0.2.8.PUBLIC.xena.gz'),
        metadata_file = os.path.join(PREP_DIR,'metadata','{cancer}.tsv')
    output:
        os.path.join(PREP_DIR,'snv','{cancer}.tsv.gz')
    shell:
        """
        python scripts/count_mutations_per_gene_sample_variant.py \
                    --snv_file={input.snv_file} \
                    --metadata_file={input.metadata_file} \
                    --output_file={output}
        """
        
        
rule compute_ica_runs:
    input:
        lambda wildcards: DATASETS[wildcards.dataset]
    output:
        directory(os.path.join(PREP_DIR,'ica_runs','{dataset}')),
        S = os.path.join(PREP_DIR,'ica_runs','{dataset}','S.pickle.gz'),
        A = os.path.join(PREP_DIR,'ica_runs','{dataset}','A.pickle.gz')
    params:
        n_components = N_COMPONENTS,
        iterations = ITERATIONS
    threads: 15
    resources:
        runtime = 3600*24, # 24h
        memory = 30 # GB
    shell:
        """
        python scripts/compute_ica_runs.py \
                    --input_file={input} \
                    --S_file={output.S} \
                    --A_file={output.A} \
                    --n_components={params.n_components} \
                    --iterations={params.iterations} \
                    --n_jobs={threads}
        """
        
        
rule compute_sample_indices:
    input:
        os.path.join(PREP_DIR,'genexpr','TCGA','{cancer}.tsv.gz')
    output:
        os.path.join(PREP_DIR,'sample_indices','TCGA','{cancer}.tsv')
    shell:
        """
        nice python scripts/compute_sample_indices.py \
                    --genexpr_file={input} \
                    --output_file={output}
        """
        
        
rule count_samples:
    input:
        datasets = [DATASETS[dataset] for dataset in DATASETS.keys()]
    output:
        os.path.join(RESULTS_DIR,'preprocess_data','files','dataset_info.tsv')
    run:
        import os
        import pandas as pd
        
        dataset_info = []
        for filename in input.datasets:
            print(filename)
            
            df = pd.read_table(filename, index_col=0)
            
            dataset_info.append({
                "dataset": os.path.basename(filename).replace(".tsv.gz",""),
                "main": os.path.basename(os.path.dirname(filename)) if "Sastry" not in filename else os.path.basename(filename).replace(".tsv.gz",""),
                "n_samples": df.shape[1],
                "n_genes": df.shape[0]
            })
            
            del df
            
        dataset_info = pd.DataFrame(dataset_info)
        
        dataset_info.to_csv(output[0], sep="\t", index=False)
        
        
rule clustering_pipeline_Sastry2019:
    input:
        S_all = os.path.join(PREP_DIR,'ica_runs','Sastry2019','S.pickle.gz'),
        A_all = os.path.join(PREP_DIR,'ica_runs','Sastry2019','A.pickle.gz')
    output:
        os.path.join(PREP_DIR,'original_pipeline_Sastry2019','{distance_func}','S.csv'),
        os.path.join(PREP_DIR,'original_pipeline_Sastry2019','{distance_func}','A.csv'),
        os.path.join(PREP_DIR,'original_pipeline_Sastry2019','{distance_func}','component_stats.csv')        
    params:
        distance_func = "{distance_func}",
        eps = 0.5,
        min_frac = 0.5,
        n_iters = 100,
        output_dir = os.path.join(PREP_DIR,'original_pipeline_Sastry2019','{distance_func}')
    shell:
        """
        nice python scripts/clustering_pipeline_Sastry2019.py \
                    --S_all_file={input.S_all} \
                    --A_all_file={input.A_all} \
                    --distance_func={params.distance_func} \
                    --eps={params.eps} \
                    --min_frac={params.min_frac} \
                    --n_iters={params.n_iters} \
                    --output_dir={params.output_dir}
        """